import asyncio
import json
import os
from aiogram import Bot, Dispatcher, types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from apscheduler.schedulers.asyncio import AsyncIOScheduler

import os
TOKEN = os.getenv("TOKEN")

bot = Bot(token=TOKEN)
dp = Dispatcher()
users = {}  # {user_id: {"took_pill": False}}

USERS_FILE = "users.json"


# ===== –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–æ–º =====
def load_users():
    global users
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            users = json.load(f)
    else:
        users = {}


def save_users():
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump(users, f, ensure_ascii=False, indent=2)


# ===== –ö–Ω–æ–ø–∫–∞ =====
def get_pill_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="üíä –Ø –≤—ã–ø–∏–ª–∞", callback_data="took_pill"))
    return builder.as_markup()


# ===== –ö–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ –ø–∏—à–µ—Ç –±–æ—Ç—É =====
@dp.message()
async def register_user(message: types.Message):
    user_id = str(message.from_user.id)
    if user_id not in users:
        users[user_id] = {"took_pill": False}
        save_users()
        await message.answer("–ü—Ä–∏–≤–µ—Ç, –∫–∏—Å–∫–∞! üëã –Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –≤—ã–ø–∏—Ç—å —Ç–∞–±–ª–µ—Ç–∫—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 22:00!")
    else:
        await message.answer("–Ø —É–∂–µ —Ç–µ–±—è –ø–æ–º–Ω—é üíä")


# ===== –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ =====
async def send_reminders():
    for user_id, data in users.items():
        users[user_id]["took_pill"] = False
        save_users()
        await bot.send_photo(
            user_id,
            photo="https://i.pinimg.com/736x/e4/d2/4e/e4d24ee70625de94c5fb4e973903af0c.jpg",
            caption="–í—ã–ø–µ–π —Ç–∞–±–ª–µ—Ç–∫—É, –∫–æ—Ç–µ–Ω–æ–∫) üíä",
            reply_markup=get_pill_keyboard()
        )
        asyncio.create_task(reminder_loop(user_id))


# ===== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã =====
async def reminder_loop(user_id):
    for _ in range(30):  # –º–∞–∫—Å–∏–º—É–º 1 —á–∞—Å
        await asyncio.sleep(120)
        if users[user_id]["took_pill"]:
            break
        await bot.send_message(
            user_id,
            "–ú–æ—è –ª—é–±–∏–º–∞—è ‚Äî –Ω–µ –∑–∞–±—É–¥—å –≤—ã–ø–∏—Ç—å —Ç–∞–±–ª–µ—Ç–∫—É!",
            reply_markup=get_pill_keyboard()
        )


# ===== –ö–æ–≥–¥–∞ —á–µ–ª–æ–≤–µ–∫ –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É =====
@dp.callback_query(lambda c: c.data == "took_pill")
async def pill_taken(callback: types.CallbackQuery):
    user_id = str(callback.from_user.id)
    if user_id in users:
        users[user_id]["took_pill"] = True
        save_users()
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer("–û—Ç–ª–∏—á–Ω–æ! üëè –ù–µ –∑–∞–±—É–¥—å –∑–∞–≤—Ç—Ä–∞ —Ç–æ–∂–µ.")


# ===== –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è =====
async def main():
    load_users()
    scheduler = AsyncIOScheduler()
    scheduler.add_job(send_reminders, 'cron', hour=22, minute=0)
    scheduler.start()

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏!")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())